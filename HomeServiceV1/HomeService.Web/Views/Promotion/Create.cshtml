@model HomeService.Web.Models.PromotionCreateModel

@{
    ViewBag.Title = "Create";
}

<h2>Add Promotion Service</h2>

@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <hr />
        @*@Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.Expertise, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Expertise, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Expertise, "", new { @class = "text-danger" })
            </div>
        </div>*@

        <div class="form-group">
            @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="form-group">
                <div class="col-md-3">
                    <div class='input-group date' id='datetimepicker1'>
                        @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control input-group" } })
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                        @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            </div>

        <div class="form-group">
            @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="form-group">
                <div class="col-md-3">
                    <div class='input-group date' id='datetimepicker2'>
                        @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control" } })
                        <span class="input-group-addon">
                            <span class="glyphicon glyphicon-calendar"></span>
                        </span>
                        @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
            </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Tags, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Tags, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.Tags, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>


@section Scripts
{
@Scripts.Render("~/bundles/jqueryval")
<script type="text/javascript">
    $(function () {
        $('#StartDate').val('');
        $('#EndDate').val('');
        $('#datetimepicker1').datetimepicker({
            format: 'MM/DD/YYYY'
        });
        $('#datetimepicker2').datetimepicker({
            format: 'MM/DD/YYYY'
        });
        $("#datetimepicker1").on("dp.change", function (e) {
            $('#datetimepicker2').data("DateTimePicker").minDate(e.date);
        });
        $("#datetimepicker2").on("dp.change", function (e) {
            $('#datetimepicker1').data("DateTimePicker").maxDate(e.date);
        });

        $("#Price").on("change paste keyup", function () {
            this.value = this.value.replace(/[^0-9\.]/g, '');
        });

        //$.validator.setDefaults({
        //    highlight: function (element, errorClass, validClass) {
        //        if (element.type === "radio") {
        //            this.findByName(element.name).addClass(errorClass).removeClass(validClass);
        //        } else {
        //            $(element).closest('.form-group').removeClass('has-success has-feedback').addClass('has-error has-feedback');
        //            $(element).closest('.form-group').find('i.fa').remove();
        //            $(element).closest('.form-group').append('<i class="fa fa-exclamation fa-lg form-control-feedback"></i>');
        //        }
        //    },
        //    unhighlight: function (element, errorClass, validClass) {
        //        if (element.type === "radio") {
        //            this.findByName(element.name).removeClass(errorClass).addClass(validClass);
        //        } else {
        //            $(element).closest('.form-group').removeClass('has-error has-feedback').addClass('has-success has-feedback');
        //            $(element).closest('.form-group').find('i.fa').remove();
        //            $(element).closest('.form-group').append('<i class="fa fa-check fa-lg form-control-feedback"></i>');
        //        }
        //    }
        //});

        //$("form").validate({
        //    rules: {
        //        'Price': {
        //            required: true
                   
        //        },
        //        'Description': {
        //            required: true
                   
        //        }
              
        //    }
        //});
    });
</script>

}
